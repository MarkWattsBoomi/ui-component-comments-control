!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=7)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(5),r=function(){function e(e){if(this.ExternalId=null,this.IsSelected=!1,this.Order=0,this.Properties={},e&&e[0]){var t=e[0];this.DeveloperName=t.developerName,this.InternalId=t.internalId,this.ExternalId=t.externalId,this.Order=t.order,this.IsSelected=t.isSelected;for(var n=0,r=t.properties;n<r.length;n++){var a=r[n];this.Properties[a.developerName]=new o.FlowObjectDataProperty(a)}}}return Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},set:function(e){this.DeveloperName=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"externalId",{get:function(){return this.ExternalId},set:function(e){this.ExternalId=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"internalId",{get:function(){return this.InternalId},set:function(e){this.InternalId=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isSelected",{get:function(){return this.IsSelected},set:function(e){this.IsSelected=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"order",{get:function(){return this.Order},set:function(e){this.Order=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"properties",{get:function(){return this.Properties},enumerable:!0,configurable:!0}),e.newInstance=function(e){return new this([{developerName:e,externalId:null,internalId:manywho.utils.guid(),isSelected:!0,order:0,properties:[]}])},e.prototype.addProperty=function(e){this.Properties[e.developerName]=e},e.prototype.removeProperty=function(e){delete this.Properties[e]},e.prototype.iObjectData=function(){for(var e=[],t=0,n=Object.keys(this.properties);t<n.length;t++){var o=n[t];e.push(this.properties[o].iFlowObjectDataProperty())}return{developerName:this.developerName,externalId:this.externalId,internalId:this.internalId,isSelected:this.isSelected,order:this.order,properties:e}},e.prototype.iFlowObjectDataArray=function(){var e=[];return e.push(this.iObjectData()),e},e}();t.FlowObjectData=r},function(e,t){e.exports=React},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(0),a=n(3);!function(e){e[e.ContentString=0]="ContentString",e[e.ContentNumber=1]="ContentNumber",e[e.ContentObject=2]="ContentObject",e[e.ContentBoolean=3]="ContentBoolean",e[e.ContentList=4]="ContentList",e[e.ContentPassword=5]="ContentPassword",e[e.ContentContent=6]="ContentContent",e[e.ContentDateTime=7]="ContentDateTime",e[e.ContentEncrypted=8]="ContentEncrypted"}(o=t.eContentType||(t.eContentType={}));var i=function(){function e(e){switch(this.ContentType=o[e.contentType],this.DeveloperName=e.developerName,this.TypeElementDeveloperName=e.typeElementDeveloperName,this.TypeElementId=e.typeElementId,this.TypeElementPropertyDeveloperName=e.typeElementPropertyDeveloperName,this.TypeElementPropertyId=e.typeElementPropertyId,this.ValueElementId=e.valueElementId,this.ContentType){case o.ContentObject:this.Value=e.objectData&&e.objectData[0]?new r.FlowObjectData(e.objectData):null;break;case o.ContentList:this.Value=e.objectData&&e.objectData[0]?new a.FlowObjectDataArray(e.objectData):new a.FlowObjectDataArray([]);break;default:this.Value=e.contentValue}}return Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementDeveloperName",{get:function(){return this.TypeElementDeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyDeveloperName",{get:function(){return this.TypeElementPropertyDeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"valueElementId",{get:function(){return this.ValueElementId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.Value},set:function(e){this.Value=e},enumerable:!0,configurable:!0}),e.prototype.iFlowField=function(){var e,t=[];switch(this.ContentType){case o.ContentObject:var n=this.Value;t.push(n.iObjectData());break;case o.ContentList:t=this.Value.iFlowObjectDataArray();break;default:e=this.Value}return{contentType:o[this.ContentType],contentValue:e,developerName:this.DeveloperName,objectData:t,typeElementDeveloperName:this.TypeElementDeveloperName,typeElementId:this.TypeElementId,typeElementPropertyDeveloperName:this.TypeElementPropertyDeveloperName,typeElementPropertyId:this.TypeElementPropertyId,valueElementId:this.ValueElementId}},e}();t.FlowField=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(2),a=n(0);!function(e){e[e.ascending=0]="ascending",e[e.descending=1]="descending"}(o=t.eSortOrder||(t.eSortOrder={}));var i=function(){function e(e){this.Items=[];for(var t=0,n=e||[];t<n.length;t++){var o=n[t];this.Items.push(new a.FlowObjectData([o]))}}return Object.defineProperty(e.prototype,"items",{get:function(){return this.Items},enumerable:!0,configurable:!0}),e.prototype.sort=function(e,t){return void 0===e&&(e=o.ascending),e===o.ascending?t?this.Items.sort(function(e,n){var o,a;switch(e.properties[t].contentType){case r.eContentType.ContentNumber:o=parseFloat(e.properties[t].value),a=parseFloat(n.properties[t].value);break;case r.eContentType.ContentDateTime:o=new Date(e.properties[t].value),a=new Date(n.properties[t].value);break;default:o=e.properties[t].value,a=n.properties[t].value}switch(!0){case o<a:return-1;case o>a:return 1;default:return 0}}):this.Items.sort(function(e,t){return e.order-t.order}):t?this.Items.sort(function(e,n){switch(!0){case e.properties[t].value<n.properties[t].value:return 1;case e.properties[t].value>n.properties[t].value:return-1;default:return 0}}):this.Items.sort(function(e,t){return e.order-t.order})},e.prototype.addItem=function(e){this.Items.push(e)},e.prototype.clearItems=function(){this.Items=[]},e.prototype.iFlowObjectDataArray=function(){for(var e=[],t=0,n=this.Items;t<n.length;t++){var o=n[t];e.push(o.iObjectData())}return e},e.prototype.getItemWithPropertyName=function(e,t,n){for(var o=0,a=this.Items;o<a.length;o++){var i=a[o];if(i.properties[e]&&i.properties[e].value){var l=i.properties[e].value,s=t;switch(i.properties[e].contentType){case r.eContentType.ContentString:l=l.toLowerCase(),s=s.toLowerCase();break;case r.eContentType.ContentNumber:l=l,s=parseFloat(s.toLowerCase());break;case r.eContentType.ContentBoolean:l=l,s="true"===new String(s).toLowerCase()}if(l===s)return i.properties[n]}}return null},e.prototype.getItemWithPropertyValue=function(e,t){for(var n=0,o=this.Items;n<o.length;n++){var a=o[n];if(a.properties[e]&&a.properties[e].value){var i=a.properties[e].value,l=t;switch(a.properties[e].contentType){case r.eContentType.ContentString:i=i.toLowerCase(),l=l.toLowerCase();break;case r.eContentType.ContentNumber:i=i,l=parseFloat(l.toLowerCase());break;case r.eContentType.ContentBoolean:i=i,l="true"===new String(l).toLowerCase()}if(i===l)return a}}},e}();t.FlowObjectDataArray=i},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var a=n(1),i=function(e){function t(t){return e.call(this,t)||this}return r(t,e),t.prototype.componentDidMount=function(){},t.prototype.render=function(){var e=this;if(this.props.data){var t=this.props.data.properties.Author.value,n=new Date(this.props.data.properties.Date.value).toLocaleString(),o=this.props.data.properties.Comment.value,r=void 0;return 1==this.props.canDelete&&(r=a.createElement("span",{className:"glyphicon glyphicon-remove delete-comment-button",title:"Remove Comment",onClick:function(t){e.props.delete(e.props.data)}})),a.createElement("div",{className:"comment-bubble"},a.createElement("div",{className:"comment-bubble-client"},a.createElement("div",{className:"comment-bubble-client-header"},a.createElement("div",{style:{float:"left"}},a.createElement("span",{className:"comment-bubble-client-header-span"},"Added by ",t," on ",n)),a.createElement("div",{style:{float:"right"}},r)),a.createElement("div",{className:"comment-bubble-client-body"},a.createElement("span",{className:"comment-bubble-client-body-span"},o))))}return a.createElement("div",null)},t}(a.Component);t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=n(0),a=n(3),i=function(){function e(e){switch(this.DeveloperName=e.developerName,this.ContentType=o.eContentType[e.contentType],this.ContentFormat=e.contentFormat,this.TypeElementId=e.typeElementId,this.TypeElementPropertyId=e.typeElementPropertyId,this.ContentType){case o.eContentType.ContentObject:this.Value=e.objectData?new r.FlowObjectData(e.objectData):null;break;case o.eContentType.ContentList:this.value=e.objectData?new a.FlowObjectDataArray(e.objectData):new a.FlowObjectDataArray([]);break;default:this.value=e.contentValue}}return e.newInstance=function(e,t,n){var r,a=[];switch(t){case o.eContentType.ContentObject:var i=n;a.push(i.iObjectData());break;case o.eContentType.ContentList:a=n.iFlowObjectDataArray();break;default:r=n}return new this({contentFormat:null,contentType:o.eContentType[t],contentValue:r,developerName:e,objectData:a,typeElementId:null,typeElementPropertyId:null})},Object.defineProperty(e.prototype,"contentFormat",{get:function(){return this.ContentFormat},set:function(e){this.contentFormat=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},set:function(e){this.ContentType=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},set:function(e){this.DeveloperName=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},set:function(e){this.TypeElementId=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},set:function(e){this.TypeElementPropertyId=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){switch(this.contentType){case o.eContentType.ContentNumber:return parseFloat(this.Value?this.Value:"0");case o.eContentType.ContentBoolean:return"true"===new String(this.Value).toLowerCase();default:return this.Value}},set:function(e){this.Value=e},enumerable:!0,configurable:!0}),e.prototype.iFlowObjectDataProperty=function(){var e,t=[];switch(this.ContentType){case o.eContentType.ContentObject:var n=this.Value;n&&n.developerName&&n.developerName.length>0&&t.push(n.iObjectData());break;case o.eContentType.ContentList:t=this.Value.iFlowObjectDataArray();break;default:e=this.Value}return{contentFormat:this.ContentFormat,contentType:o.eContentType[this.ContentType],contentValue:e,developerName:this.DeveloperName,objectData:t,typeElementId:this.TypeElementId,typeElementPropertyId:this.TypeElementPropertyId}},e}();t.FlowObjectDataProperty=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){this.Name=e,this.Value=t}return Object.defineProperty(e.prototype,"name",{get:function(){return this.Name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.Value},enumerable:!0,configurable:!0}),e}();t.FlowAttribute=o},function(e,t,n){"use strict";function o(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),o(n(8)),o(n(4))},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))(function(r,a){function i(e){try{s(o.next(e))}catch(e){a(e)}}function l(e){try{s(o.throw(e))}catch(e){a(e)}}function s(e){e.done?r(e.value):new n(function(t){t(e.value)}).then(i,l)}s((o=o.apply(e,t||[])).next())})},i=this&&this.__generator||function(e,t){var n,o,r,a,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,o&&(r=2&a[0]?o.return:a[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,a[1])).done)return r;switch(o=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,o=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(r=(r=i.trys).length>0&&r[r.length-1])&&(6===a[0]||2===a[0])){i=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){i.label=a[1];break}if(6===a[0]&&i.label<r[1]){i.label=r[1],r=a;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(a);break}r[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],o=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(t,"__esModule",{value:!0});var l=n(1),s=n(4);n(9);var u=n(0),c=n(5),p=n(10),d=n(14),m=function(e){function t(t){var n=e.call(this,t)||this;return n.modalShown=!1,n.addComment=n.addComment.bind(n),n.closeModal=n.closeModal.bind(n),n.deleteComment=n.deleteComment.bind(n),n}return r(t,e),t.prototype.compareObjectData=function(e,t){return e.properties.Author.value===t.properties.Author.value&&e.properties.Date.value===t.properties.Date.value&&e.properties.Comment.value===t.properties.Comment.value},t.prototype.deleteComment=function(e){return a(this,void 0,void 0,function(){var t,n,o;return i(this,function(r){switch(r.label){case 0:for(t=this.fields[this.attributes.CommentsListField.value],n=t.value,o=n.items.length-1;o>=0;o--)!0===this.compareObjectData(e,n.items[o])&&n.items.splice(o,1);return[4,this.updateValues([t])];case 1:return r.sent(),this.attributes.RemoveCommentOutcome&&this.attributes.RemoveCommentOutcome.value.length>0&&this.outcomes[this.attributes.RemoveCommentOutcome.value]?[4,this.triggerOutcome(this.attributes.RemoveCommentOutcome.value)]:[3,3];case 2:r.sent(),r.label=3;case 3:return[4,this.loadValues()];case 4:return r.sent(),[2]}})})},t.prototype.addComment=function(){this.modalShown=!0,this.forceUpdate()},t.prototype.closeModal=function(e){return a(this,void 0,void 0,function(){var t,n;return i(this,function(o){switch(o.label){case 0:return this.modalShown=!1,!0!==e?[3,5]:((t=new u.FlowObjectData).developerName="Comment",t.isSelected=!0,t.addProperty(new c.FlowObjectDataProperty({contentFormat:null,contentType:"ContentString",contentValue:this.user.firstName+" "+this.user.lastName,developerName:"Author",objectData:null,typeElementId:null,typeElementPropertyId:null})),t.addProperty(new c.FlowObjectDataProperty({contentFormat:null,contentType:"ContentDateTime",contentValue:(new Date).toISOString(),developerName:"Date",objectData:null,typeElementId:null,typeElementPropertyId:null})),t.addProperty(new c.FlowObjectDataProperty({contentFormat:null,contentType:"ContentString",contentValue:this.newComment.value,developerName:"Comment",objectData:null,typeElementId:null,typeElementPropertyId:null})),(n=this.fields[this.attributes.CommentsListField.value]).value.addItem(t),[4,this.updateValues([n])]);case 1:return o.sent(),this.attributes.AddCommentOutcome&&this.attributes.AddCommentOutcome.value.length>0&&this.outcomes[this.attributes.AddCommentOutcome.value]?[4,this.triggerOutcome(this.attributes.AddCommentOutcome.value)]:[3,3];case 2:o.sent(),o.label=3;case 3:return[4,this.loadValues()];case 4:return o.sent(),[3,6];case 5:this.forceUpdate(),o.label=6;case 6:return[2]}})})},t.prototype.render=function(){var e=this,t=this.getAttribute("Title")||"Comments",n="true"==this.getAttribute("Can Delete")||"true"==this.getAttribute("CanDelete"),o=this.model.height+"px",r={width:"100%"};r.height=o;var a,i=[];if(this.fields[this.attributes.CommentsListField.value])for(var u=0,c=this.fields[this.attributes.CommentsListField.value].value.items;u<c.length;u++){var p=c[u];i.push(l.createElement(s.default,{data:p,props:this.props,canDelete:n,delete:this.deleteComment}))}return this.modalShown&&(a=l.createElement(d.default,{onCloseRequest:this.closeModal},l.createElement("div",{className:"modal-dialog"},l.createElement("div",{className:"modal-dialog-header"},l.createElement("div",{style:{float:"left"}},l.createElement("span",{className:"modal-dialog-header-title"},"Add a new document")),l.createElement("div",{style:{float:"right"}},l.createElement("span",{className:"glyphicon glyphicon-remove modal-dialog-header-button",title:"Close",onClick:function(t){return e.closeModal(!1)}}))),l.createElement("div",{className:"modal-dialog-body"},l.createElement("div",{className:"modal-dialog-body-client"},l.createElement("div",{className:"modal-dialog-input-row"},l.createElement("span",{className:"modal-dialog-input-label"},"Comment"),l.createElement("input",{className:"modal-dialog-input",ref:function(t){e.newComment=t},type:"text",width:"60px"})))),l.createElement("div",{className:"modal-dialog-button-bar"},l.createElement("button",{className:"modal-dialog-button-bar-button",title:"Add Comment",onClick:function(t){return e.closeModal(!0)}},"Add"),l.createElement("button",{className:"modal-dialog-button-bar-button",title:"Cancel",onClick:function(t){return e.closeModal(!1)}},"Cancel"))))),l.createElement("div",{className:"comment-list"},l.createElement("div",{className:"comment-list-header"},l.createElement("div",{style:{float:"left"}},l.createElement("span",{className:"comment-list-header-title"},t)),l.createElement("div",{style:{float:"right"}},l.createElement("span",{className:"glyphicon glyphicon-plus comment-list-header-button",title:"Add Comment",onClick:this.addComment.bind(this)}))),l.createElement("div",{className:"comment-list-body"},i),a)},t}(p.FlowPage);manywho.component.register("CommentsList",m),t.default=m},function(e,t,n){},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))(function(r,a){function i(e){try{s(o.next(e))}catch(e){a(e)}}function l(e){try{s(o.throw(e))}catch(e){a(e)}}function s(e){e.done?r(e.value):new n(function(t){t(e.value)}).then(i,l)}s((o=o.apply(e,t||[])).next())})},i=this&&this.__generator||function(e,t){var n,o,r,a,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,o&&(r=2&a[0]?o.return:a[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,a[1])).done)return r;switch(o=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,o=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(r=(r=i.trys).length>0&&r[r.length-1])&&(6===a[0]||2===a[0])){i=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){i.label=a[1];break}if(6===a[0]&&i.label<r[1]){i.label=r[1],r=a;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(a);break}r[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],o=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(t,"__esModule",{value:!0});var l=function(e){function t(t){var n=e.call(this,t)||this;return n.reloadValues=n.reloadValues.bind(n),manywho.eventManager.addDoneListener(n.reloadValues),n}return r(t,e),t.prototype.componentDidMount=function(){return a(this,void 0,void 0,function(){return i(this,function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),[4,this.loadValues()];case 2:return t.sent(),[2]}})})},t.prototype.triggerOutcome=function(t,n){return a(this,void 0,void 0,function(){return i(this,function(o){switch(o.label){case 0:return[4,e.prototype.triggerOutcome.call(this,t,n)];case 1:return o.sent(),[4,this.loadModel()];case 2:return o.sent(),[4,this.loadValues()];case 3:return o.sent(),[2]}})})},t.prototype.reloadValues=function(e,t){return a(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this.loadModel()];case 1:return e.sent(),[4,this.loadValues()];case 2:return e.sent(),[2]}})})},t}(n(11).FlowBaseComponent);t.FlowPage=l},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))(function(r,a){function i(e){try{s(o.next(e))}catch(e){a(e)}}function l(e){try{s(o.throw(e))}catch(e){a(e)}}function s(e){e.done?r(e.value):new n(function(t){t(e.value)}).then(i,l)}s((o=o.apply(e,t||[])).next())})},i=this&&this.__generator||function(e,t){var n,o,r,a,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,o&&(r=2&a[0]?o.return:a[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,a[1])).done)return r;switch(o=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,o=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(r=(r=i.trys).length>0&&r[r.length-1])&&(6===a[0]||2===a[0])){i=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){i.label=a[1];break}if(6===a[0]&&i.label<r[1]){i.label=r[1],r=a;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(a);break}r[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],o=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(t,"__esModule",{value:!0});var l=n(1),s=n(6),u=n(12),c=n(2),p=n(0),d=n(3),m=n(13);manywho.eventManager||(manywho.eventManager={},manywho.eventManager.beforeSendListeners=[],manywho.eventManager.doneListeners=[],manywho.eventManager.failListeners=[],manywho.eventManager.beforeSend=function(e,t){manywho.eventManager.beforeSendListeners.forEach(function(n){return n(e,t)})},manywho.eventManager.done=function(e,t){manywho.eventManager.doneListeners.forEach(function(n){return n(e,t)})},manywho.eventManager.fail=function(e,t){manywho.eventManager.failListeners.forEach(function(n){return n(e,t)})},manywho.eventManager.addBeforeSendListener=function(e){manywho.eventManager.beforeSendListeners.push(e)},manywho.eventManager.addDoneListener=function(e){manywho.eventManager.doneListeners.push(e)},manywho.eventManager.addFailListener=function(e){manywho.eventManager.failListeners.push(e)},manywho.settings.initialize(null,{invoke:{beforeSend:manywho.eventManager.beforeSend,done:manywho.eventManager.done,fail:manywho.eventManager.fail}}));var h=function(e){function t(t){var n=e.call(this,t)||this;n.IsLoading=!0,n.Fields={},n.LoadingState="initial",n.loadValues=n.loadValues.bind(n),n.dontLoadValues=n.dontLoadValues.bind(n),n.updateValues=n.updateValues.bind(n),n.triggerOutcome=n.triggerOutcome.bind(n),n.ComponentId=n.props.id,n.ParentId=n.props.parentId,n.FlowKey=n.props.flowKey,n.Attributes={},n.loadModel=n.loadModel.bind(n),n.loadAttributes=n.loadAttributes.bind(n),n.loadOutcomes=n.loadOutcomes.bind(n),n.loadModel(),n.loadAttributes(),n.loadOutcomes();var o=manywho.settings.global("platform.uri")||"https://flow.manywho.com";return n.StateId=manywho.utils.extractStateId(n.props.flowKey),n.TenantId=manywho.utils.extractTenantId(n.props.flowKey),n.url=o+"/api/run/1/state/"+n.StateId+"/values",n.userurl=o+"/api/run/1/state/"+n.StateId+"/values/03dc41dd-1c6b-4b33-bf61-cbd1d0778fff",n}return r(t,e),Object.defineProperty(t.prototype,"tenantId",{get:function(){return this.TenantId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"stateId",{get:function(){return this.StateId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"flowKey",{get:function(){return this.FlowKey},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"componentId",{get:function(){return this.ComponentId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"parentId",{get:function(){return this.ParentId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isLoading",{get:function(){return this.IsLoading},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"loadingState",{get:function(){return this.LoadingState},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"outcomes",{get:function(){return this.Outcomes},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"attributes",{get:function(){return this.Attributes},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"fields",{get:function(){return this.Fields},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"model",{get:function(){return this.Model},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"user",{get:function(){return this.User},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"joinURI",{get:function(){return window.location.href},enumerable:!0,configurable:!0}),t.prototype.getAttribute=function(e,t){return this.attributes[e]?this.attributes[e].value:t||""},t.prototype.componentDidMount=function(){return a(this,void 0,void 0,function(){var e,t,n,o;return i(this,function(r){switch(e=manywho.model.getComponent(this.ComponentId,this.FlowKey),t=manywho.state.getComponent(this.componentId,this.flowKey)||{},e.contentType){case"ContentObject":case"ContentList":n=void 0,n=t.objectData?t.objectData:e.objectData,n=JSON.parse(JSON.stringify(n)),o={objectData:n},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;default:t.contentValue=e.contentValue}return manywho.utils.removeLoadingIndicator("loader"),[2]})})},t.prototype.loadOutcomes=function(){this.Outcomes={};for(var e=manywho.model.getOutcomes(this.props.id,this.props.flowKey),t=0,n=e;t<n.length;t++){var o=n[t];this.Outcomes[o.developerName]=new m.FlowOutcome(o)}for(var r=0,a=e=manywho.model.getOutcomes(null,this.props.flowKey);r<a.length;r++){o=a[r];this.Outcomes[o.developerName]=new m.FlowOutcome(o)}},t.prototype.loadAttributes=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey).attributes;if(e)for(var t=0,n=Object.keys(e);t<n.length;t++){var o=n[t];this.Attributes[o]=new s.FlowAttribute(o,e[o])}},t.prototype.loadModel=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey);if(e){this.Model={contentType:e.contentType,dataSource:new d.FlowObjectDataArray([]),developerName:e.developerName,displayColumns:[],enabled:e.isEnabled,height:e.height,helpInfo:e.helpInfo,hintInfo:e.hintValue,joinUri:this.joinURI,label:e.label,maxSize:e.maxSize,multiSelect:e.isMultiSelect,readOnly:!e.isEditable,required:e.isRequired,size:e.size,validationMessage:e.validationMessage,visible:e.isVisible,width:e.width};var t=e.objectData;if(t)for(var n=0,o=t;n<o.length;n++){var r=o[n];this.Model.dataSource.addItem(new p.FlowObjectData([r]))}var a=e.columns;if(a)for(var i=0,l=a;i<l.length;i++){var s=l[i];this.Model.displayColumns.push(new u.FlowDisplayColumn(s))}}},t.prototype.loadValues=function(){return a(this,void 0,void 0,function(){var e,t,n,o=this;return i(this,function(r){switch(r.label){case 0:return this.IsLoading=!0,this.LoadingState="initial"!==this.LoadingState?"refreshing":"initial",this.Fields={},[4,manywho.connection.request(this,null,this.url,"GET",this.TenantId,this.StateId,manywho.state.getAuthenticationToken(this.FlowKey),null)];case 1:return(r.sent()||[]).map(function(e){o.Fields[e.developerName]=new c.FlowField(e)}),[4,manywho.connection.request(this,null,this.userurl,"GET",this.TenantId,this.StateId,manywho.state.getAuthenticationToken(this.FlowKey),null)];case 2:return e=r.sent(),t=new c.FlowField(e),n=t.value.properties,this.User={directoryId:n["Directory Id"].value,directoryName:n["Directory Name"].value,email:n.Email.value||"mark",firstName:n["First Name"].value,groupId:n["Primary Group Id"].value,groupName:n["Primary Group Name"].value,id:n["User ID"].value,ipAddress:n["IP Address"].value,language:n.Language.value,lastName:n["Last Name"].value,location:n.Location.value,roleId:n["Role Id"].value,roleName:n["Role Name"].value,status:n.Status.value,userName:n.Username.value},this.IsLoading=!1,this.LoadingState="loaded",this.forceUpdate(),[2]}})})},t.prototype.dontLoadValues=function(){return a(this,void 0,void 0,function(){return i(this,function(e){return this.IsLoading=!1,this.LoadingState="loaded",this.forceUpdate(),[2]})})},t.prototype.getStateValue=function(){var e=manywho.state.getComponent(this.componentId,this.flowKey)||{};switch(manywho.model.getComponent(this.ComponentId,this.FlowKey).contentType){case"ContentObject":return new p.FlowObjectData(e.objectData[0]);case"ContentList":return new d.FlowObjectDataArray(e.objectData);default:return e.contentValue}},t.prototype.getStateValueType=function(){var e=manywho.state.getComponent(this.componentId,this.flowKey)||{};switch(manywho.model.getComponent(this.ComponentId,this.FlowKey).contentType){case"ContentObject":return new p.FlowObjectData(e.objectData[0]);case"ContentList":return new d.FlowObjectDataArray(e.objectData);default:return e.contentValue}},t.prototype.setStateValue=function(e){return a(this,void 0,void 0,function(){var t,n,o,r;return i(this,function(a){switch(t=manywho.model.getComponent(this.ComponentId,this.FlowKey),n=manywho.state.getComponent(this.componentId,this.flowKey)||{},t.contentType){case"ContentObject":o=e.iObjectData,manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;case"ContentList":r=e.iFlowObjectDataArray(),manywho.state.setComponent(this.componentId,r,this.flowKey,!0);break;case"ContentDate":n.contentValue=e.toISOString();break;default:n.contentValue=e}return[2]})})},t.prototype.updateValues=function(e){return a(this,void 0,void 0,function(){var t,n,o,r;return i(this,function(a){switch(a.label){case 0:for(this.IsLoading=!0,this.LoadingState="initial"!==this.LoadingState?"refreshing":"initial",this.forceUpdate(),t=[],n=0,o=e;n<o.length;n++)r=o[n],t.push(r.iFlowField());return[4,manywho.connection.request(this,null,this.url,"POST",this.TenantId,this.StateId,manywho.state.getAuthenticationToken(this.FlowKey),t)];case 1:return a.sent(),[2]}})})},t.prototype.triggerOutcome=function(e,t){return a(this,void 0,void 0,function(){var n;return i(this,function(o){switch(o.label){case 0:return this.IsLoading=!0,this.LoadingState="initial"!==this.LoadingState?"refreshing":"initial",this.forceUpdate(),t||(t=null),this.outcomes[e]&&(n=this.outcomes[e].iFlowOutcome()),n?[4,manywho.component.onOutcome(n,t,this.FlowKey)]:[3,2];case 1:return o.sent(),[3,3];case 2:this.log("Could not find outcome "+e),o.label=3;case 3:return[2]}})})},t.prototype.log=function(e){var t=new Date,n="["+[("0"+t.getHours()).slice(-2),("0"+t.getMinutes()).slice(-2),("0"+t.getSeconds()).slice(-2)].join(":")+"] ";console.log(n+e)},t.prototype.launchFlowSilent=function(e,t,n,o){return a(this,void 0,void 0,function(){var e,n,r;return i(this,function(a){return e=manywho.settings.global("platform.uri")||"https://flow.manywho.com",n=e+"/api/run/1/state",(r={}).id=t,r.developerName=null,r.inputs=o?o.iFlowObjectDataArray():null,manywho.connection.request(this,null,n,"POST",this.TenantId,null,manywho.state.getAuthenticationToken(this.FlowKey),r),[2]})})},t.prototype.launchFlowTab=function(e,t,n,o){return a(this,void 0,void 0,function(){var o,r;return i(this,function(a){return o=manywho.settings.global("platform.uri")||"https://flow.boomi.com",r=o+"/"+e+"/play/"+n+"?flow-id="+t,window.open(r,"_new"),[2]})})},t}(l.Component);t.FlowBaseComponent=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e){this.Column=e,this.ComponentType=e.componentType,this.ContentFormat=e.contentFormat,this.ContentType=e.contentType,this.DeveloperName=e.developerName,this.DisplayOrder=e.order,this.Label=e.label,this.ReadOnly=!e.isEditable,this.TypeElememtPropertyToDisplayId=e.typeElememtPropertyToDisplayId,this.TypeElementPropertyId=e.typeElementPropertyId,this.Visible=e.isDisplayValue}return Object.defineProperty(e.prototype,"componentType",{get:function(){return this.ComponentType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"contentFormat",{get:function(){return this.ContentFormat},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"visible",{get:function(){return this.Visible},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"readOnly",{get:function(){return this.ReadOnly},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"label",{get:function(){return this.Label},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"displayOrder",{get:function(){return this.DisplayOrder},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElememtPropertyToDisplayId",{get:function(){return this.TypeElememtPropertyToDisplayId},enumerable:!0,configurable:!0}),e.prototype.iFlowDisplayColumn=function(){return this.Column},e}();t.FlowDisplayColumn=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(6);!function(e){e.Save="SAVE",e.PartialSave="PARTIAL_SAVE",e.NoSave="NO_SAVE"}(t.ePageActionBindingType||(t.ePageActionBindingType={})),function(e){e.New="NEW",e.Query="QUERY",e.Insert="INSERT",e.Update="UPDATE",e.Upsert="UPSERT",e.Delete="DELETE",e.Remove="REMOVE",e.Add="ADD",e.Edit="EDIT",e.Next="NEXT",e.Back="BACK",e.Done="DONE",e.Save="SAVE",e.Cancel="CANCEL",e.Apply="APPLY",e.Import="IMPORT",e.Close="CLOSE",e.Open="OPEN",e.Submit="SUBMIT",e.Escalate="ESCALATE",e.Reject="REJECT",e.Delegate="DELEGATE"}(t.ePageActionType||(t.ePageActionType={}));var r=function(){function e(e){if(this.DeveloperName=e.developerName,this.Id=e.id,this.IsBulkAction=e.isBulkAction,this.IsOut=e.isOut,this.Label=e.label,this.Order=e.order,this.PageActionBindingType=e.pageActionBindingType,this.PageActionType=e.pageActionType,this.PageObjectBindingId=e.pageObjectBindingId,this.Attributes={},e.attributes)for(var t=0,n=Object.keys(e.attributes);t<n.length;t++){var r=n[t];this.Attributes[r]=new o.FlowAttribute(r,e.attributes[r])}this.Outcome=e}return Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"id",{get:function(){return this.Id},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isBulkAction",{get:function(){return this.IsBulkAction},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isOut",{get:function(){return this.IsOut},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"label",{get:function(){return this.Label},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"order",{get:function(){return this.Order},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pageActionBindingType",{get:function(){return this.PageActionBindingType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pageActionType",{get:function(){return this.PageActionType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pageObjectBindingId",{get:function(){return this.PageObjectBindingId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"attributes",{get:function(){return this.Attributes},enumerable:!0,configurable:!0}),e.prototype.iFlowOutcome=function(){return this.Outcome},e}();t.FlowOutcome=r},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var a=n(1);n(15);var i=function(e){function t(t){var n=e.call(this,t)||this;return n.handleKeyUp=n.handleKeyUp.bind(n),n.handleOutsideClick=n.handleOutsideClick.bind(n),n}return r(t,e),t.prototype.componentDidMount=function(){window.addEventListener("keyup",this.handleKeyUp,!1),document.addEventListener("click",this.handleOutsideClick,!1)},t.prototype.componentWillUnmount=function(){window.removeEventListener("keyup",this.handleKeyUp,!1),document.removeEventListener("click",this.handleOutsideClick,!1)},t.prototype.handleKeyUp=function(e){this.props.onCloseRequest},t.prototype.handleOutsideClick=function(e){this.props.onCloseRequest},t.prototype.render=function(){var e=this,t=this.props,n=(t.onCloseRequest,t.children);t.classes;return a.createElement("div",{className:"modal-redaction"},a.createElement("div",{className:"modal",ref:function(t){return e.modal=t}},a.createElement("div",{className:"modal-content"},n)))},t}(a.Component);t.default=i},function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,