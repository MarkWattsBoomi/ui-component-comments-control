!function(t){function e(n){if(o[n])return o[n].exports;var a=o[n]={i:n,l:!1,exports:{}};return t[n].call(a.exports,a,a.exports,e),a.l=!0,a.exports}var o={};e.m=t,e.c=o,e.d=function(t,o,n){e.o(t,o)||Object.defineProperty(t,o,{configurable:!1,enumerable:!0,get:n})},e.n=function(t){var o=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(o,"a",o),o},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=5)}([function(t,e){t.exports=React},function(t,e,o){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])};return function(e,o){function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var a=o(0),r=function(t){function e(e){return t.call(this,e)||this}return n(e,t),e.prototype.componentDidMount=function(){},e.prototype.render=function(){var t=[];if(this.props.data)for(var e=0;e<this.props.data.properties.length;e++){var o=this.props.data.properties[e];if(this.props.headers[o.developerName].isDisplayValue){var n,r=this.props.headers[o.developerName].order;switch(o.contentType){case"ContentString":n=o.contentValue;break;case"ContentDateTime":n=new Intl.DateTimeFormat("en-GB",{year:"numeric",month:"long",day:"2-digit"}).format(new Date(o.contentValue));break;default:n=o.contentValue}t[r]=a.createElement("td",{className:"cc-tbody-row-cell"},n)}}return a.createElement("tr",{className:"cc-tbody-row"},t)},e}(a.Component);e.default=r},function(t,e){},function(t,e,o){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])};return function(e,o){function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var a=o(0),r=function(t){function e(e){return t.call(this,e)||this}return n(e,t),e.prototype.componentDidMount=function(){},e.prototype.render=function(){if(this.props.data){var t=manywho.utils.getObjectDataProperty(this.props.data.properties,"Author").contentValue,e=manywho.utils.getObjectDataProperty(this.props.data.properties,"Date").contentValue,o=manywho.utils.getObjectDataProperty(this.props.data.properties,"Comment").contentValue;e=new Intl.DateTimeFormat("en-GB",{year:"numeric",month:"long",day:"2-digit"}).format(new Date(e));var n;return 1==this.props.canDelete&&(n=a.createElement("span",{className:"glyphicon glyphicon-remove delete-comment-button",title:"Remove Comment",onClick:this.props.delete.bind(this,this.props.data)})),a.createElement("div",{className:"comment-bubble"},a.createElement("div",{className:"comment-bubble-client"},a.createElement("div",{className:"comment-bubble-client-header"},a.createElement("div",{style:{float:"left"}},a.createElement("span",{className:"comment-bubble-client-header-span"},"Added by ",t," on ",e)),a.createElement("div",{style:{float:"right"}},n)),a.createElement("div",{className:"comment-bubble-client-body"},a.createElement("span",{className:"comment-bubble-client-body-span"},o))))}return a.createElement("div",null)},e}(a.Component);e.default=r},function(t,e,o){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])};return function(e,o){function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var a=o(0),r=function(t){function e(e){var o=t.call(this,e)||this;return o.handleKeyUp=o.handleKeyUp.bind(o),o.handleOutsideClick=o.handleOutsideClick.bind(o),o}return n(e,t),e.prototype.componentDidMount=function(){window.addEventListener("keyup",this.handleKeyUp,!1),document.addEventListener("click",this.handleOutsideClick,!1)},e.prototype.componentWillUnmount=function(){window.removeEventListener("keyup",this.handleKeyUp,!1),document.removeEventListener("click",this.handleOutsideClick,!1)},e.prototype.handleKeyUp=function(t){this.props.onCloseRequest},e.prototype.handleOutsideClick=function(t){this.props.onCloseRequest},e.prototype.render=function(){var t=this,e=this.props,o=e.onCloseRequest,n=e.children;e.classes;return a.createElement("div",{className:"modal-redaction"},a.createElement("div",{className:"modal",ref:function(e){return t.modal=e}},a.createElement("div",{className:"modal-content"},n)),a.createElement("button",{type:"button",className:"modal-close-button",onClick:o}))},e}(a.Component);e.default=r},function(t,e,o){"use strict";function n(t){for(var o in t)e.hasOwnProperty(o)||(e[o]=t[o])}Object.defineProperty(e,"__esModule",{value:!0}),n(o(6)),n(o(1)),n(o(7)),n(o(3)),n(o(4))},function(t,e,o){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])};return function(e,o){function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var a=o(0),r=o(1);o(2);var i=function(t){function e(e){var o=t.call(this,e)||this;o.componentId="",o.flowKey="",o.attributes={},o.readonly=!1,o.componentId=e.id,o.flowKey=e.flowKey;var n=manywho.model.getComponent(o.props.id,o.props.flowKey);if(n.attributes)for(var a in n.attributes)o.attributes[a]=n.attributes[a];return o}return n(e,t),e.prototype.componentDidMount=function(){var t,e=manywho.model.getComponent(this.componentId,this.flowKey),o=manywho.state.getComponent(this.componentId,this.flowKey)||{};t=o.objectData?o.objectData:e.objectData,t=JSON.parse(JSON.stringify(t));var n={objectData:[t]};manywho.state.setComponent(this.componentId,n,this.flowKey,!0),this.readonly=!e.isEditable},e.prototype.getAttribute=function(t){return this.attributes[t]?this.attributes[t]:null},e.prototype.save=function(){var t=(manywho.state.getComponent(this.componentId,this.flowKey),manywho.model.getComponent(this.componentId,this.flowKey)),e=t.objectData[0];e=JSON.parse(JSON.stringify(e)),e.isSelected=!0;var o={objectData:[e]};manywho.state.setComponent(this.componentId,o,this.flowKey,!0),this.forceUpdate()},e.prototype.render=function(){var t=manywho.model.getComponent(this.componentId,this.flowKey),e=(manywho.state.getComponent(this.componentId,this.flowKey),this.getAttribute("Title")||"Comments"),o=(t.width,t.height+"px"),n={};n.width="100%",n.height=o;var i=[],s=[],c=[];if(t.columns&&t.columns.length>0)for(var l=0;l<t.columns.length;l++){var p=t.columns[l];i[p.developerName]=p,i[p.developerName].isDisplayValue&&(s[p.order]=a.createElement("td",{className:"cc-column-header"},t.columns[l].label))}if(t.objectData&&t.objectData.length>0)for(var m=0;m<t.objectData.length;m++)c.push(a.createElement(r.default,{data:t.objectData[m],headers:i}));return a.createElement("div",{className:"cc-control"},a.createElement("div",{className:"cc-header"},a.createElement("div",{style:{float:"left"}},a.createElement("span",{className:"cc-header-title"},e)),a.createElement("div",{style:{float:"right"}},a.createElement("span",{className:"glyphicon glyphicon-plus cc-header-button",title:"Add Comment",onClick:this.addComment.bind(this)}))),a.createElement("div",{className:"cc-body"},a.createElement("table",{className:"cc-table"},a.createElement("thead",{className:"cc-thead"},a.createElement("tr",{className:"cc-thead-row"},s)),a.createElement("tbody",{className:"cc-tbody"},c))))},e.prototype.addComment=function(){},e}(a.Component);manywho.component.register("CommentsTable",i),e.default=i},function(t,e,o){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])};return function(e,o){function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var a=o(0),r=o(3),i=o(4);o(2);var s=function(t){function e(e){var o=t.call(this,e)||this;o.componentId="",o.flowKey="",o.attributes={},o.readonly=!1,o.modalShown=!1,o.componentId=e.id,o.flowKey=e.flowKey;var n=manywho.model.getComponent(o.props.id,o.props.flowKey);if(n.attributes)for(var a in n.attributes)o.attributes[a]=n.attributes[a];return o}return n(e,t),e.prototype.componentDidMount=function(){var t,e=manywho.model.getComponent(this.componentId,this.flowKey),o=manywho.state.getComponent(this.componentId,this.flowKey)||{};t=o.objectData?o.objectData:e.objectData,t=JSON.parse(JSON.stringify(t));var n={objectData:t};manywho.state.setComponent(this.componentId,n,this.flowKey,!0),this.readonly=!e.isEditable},e.prototype.getAttribute=function(t){return this.attributes[t]?this.attributes[t]:null},e.prototype.compareObjectData=function(t,e){return manywho.utils.getObjectDataProperty(t.properties,"Author").contentValue==manywho.utils.getObjectDataProperty(e.properties,"Author").contentValue&&manywho.utils.getObjectDataProperty(t.properties,"Date").contentValue===manywho.utils.getObjectDataProperty(e.properties,"Date").contentValue&&manywho.utils.getObjectDataProperty(t.properties,"Comment").contentValue===manywho.utils.getObjectDataProperty(e.properties,"Comment").contentValue},e.prototype.deleteComment=function(t){for(var e=(manywho.state.getComponent(this.componentId,this.flowKey),manywho.model.getComponent(this.componentId,this.flowKey)),o=[],n=0;n<e.objectData.length;n++){var a=e.objectData[n];0==this.compareObjectData(a,t)&&(a=JSON.parse(JSON.stringify(a)),o.push(a))}var r={objectData:o};manywho.state.setComponent(this.componentId,r,this.flowKey,!0),manywho.engine.sync(this.flowKey)},e.prototype.addNewComment=function(t){var e=(manywho.state.getComponent(this.componentId,this.flowKey),manywho.model.getComponent(this.componentId,this.flowKey)),o={};e.objectData&&e.objectData.length>0?o=e.objectData[0]:(o.properties=[],o.developerName="Comment",o.properties.push({developerName:"Author",contentType:"ContentString",contentValue:""}),o.properties.push({developerName:"Date",contentType:"ContentDateTime",contentValue:""}),o.properties.push({developerName:"Comment",contentType:"ContentString",contentValue:""})),o=JSON.parse(JSON.stringify(o)),o.isSelected=!0,manywho.utils.setObjectDataProperty(o.properties,"Author","me"),manywho.utils.setObjectDataProperty(o.properties,"Date",(new Date).toISOString()),manywho.utils.setObjectDataProperty(o.properties,"Comment",t);var n=e.objectData||[];n.push(o);var a={objectData:n};manywho.state.setComponent(this.componentId,a,this.flowKey,!0),manywho.engine.sync(this.flowKey)},e.prototype.render=function(){var t=this,e=manywho.model.getComponent(this.componentId,this.flowKey),o=(manywho.state.getComponent(this.componentId,this.flowKey),this.getAttribute("Title")||"Comments"),n="true"==this.getAttribute("Can Delete")||"true"==this.getAttribute("CanDelete"),s=(e.width,e.height+"px"),c={};c.width="100%",c.height=s;var l=[];if(e.objectData&&e.objectData.length>0)for(var p=0;p<e.objectData.length;p++)l.push(a.createElement(r.default,{data:e.objectData[p],props:this.props,canDelete:n,delete:this.deleteComment.bind(this)}));var m;1==e.isEditable&&(m=a.createElement("span",{className:"glyphicon glyphicon-plus add-dialog-header-button",title:"Add Comment",onClick:this.modalClose.bind(this)}));var d;return this.modalShown&&(d=a.createElement(i.default,{onCloseRequest:this.modalClose.bind(this)},a.createElement("div",{className:"add-dialog"},a.createElement("div",{className:"add-dialog-header"},a.createElement("div",{style:{float:"left"}},a.createElement("span",{className:"add-dialog-header-title"},"Add a new comment")),a.createElement("div",{style:{float:"right"}},m)),a.createElement("div",{className:"add-dialog-body"},a.createElement("div",{className:"add-dialog-body-client"},a.createElement("div",{className:"add-dialog-field"},a.createElement("span",{className:"add-dialog-input-label"},"Comment"),a.createElement("input",{className:"add-dialog-input",ref:function(e){t.newComment=e},type:"text",width:"60px"})))),a.createElement("div",{className:"add-dialog-button-bar"},a.createElement("button",{className:"add-dialog-button-bar-button",title:"Add Comment",onClick:this.modalClose.bind(this,"ADD")},"Add"),a.createElement("button",{className:"add-dialog-button-bar-button",title:"Cancel",onClick:this.modalClose.bind(this)},"Cancel"))))),a.createElement("div",{className:"comment-list"},a.createElement("div",{className:"comment-list-header"},a.createElement("div",{style:{float:"left"}},a.createElement("span",{className:"comment-list-header-title"},o)),a.createElement("div",{style:{float:"right"}},a.createElement("span",{className:"glyphicon glyphicon-plus comment-list-header-button",title:"Add Comment",onClick:this.addComment.bind(this)}))),a.createElement("div",{className:"comment-list-body"},l),d)},e.prototype.addComment=function(){this.modalShown=!0,this.forceUpdate()},e.prototype.modalClose=function(t){if(t&&"ADD"==t){var e=this.newComment.value;this.addNewComment(e)}this.modalShown=!1,this.forceUpdate()},e}(a.Component);manywho.component.register("CommentsList",s),e.default=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,